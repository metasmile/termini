#!/usr/local/bin/node

//Requirements : nodejs v0.12.0 or higher

//config
var log = console.log.bind(console);
var fs = require('fs-extra');
var mkdirp = require('mkdirp');
var cho = require('chokidar');
var mime = require('mime');
var path = require('path');
var args = require('minimist')(process.argv.slice(2));
var params = args._;
var queue = require('queue');
var mv = require('mv');
var glob = require("glob");
var sh = require('child_process');

//resolve args
if(args['h']){
	log('Usage: termini [options]... [preset] [PATH SRC] [PATH DEST]');
	log('\n')
	log('# Auto-import music files:\n > termini itunes [PATH SRC] [PATH to itunes music library]');
	log('# Restrict by mimetypes or extenstions:\n > termini --allow-mime-types=audio/mpeg,video/mp4 --allow-extensions=mp3,jpg,gif,mp4 [PATH SRC] [PATH DEST]');
	process.exit(code=0);
}

if(params.length<2){
	log('Usage: termini [options]... [preset] [PATH SRC] [PATH DEST]');
	process.exit(1);
}

var PATH_TARGET = path.resolve(params.length==3 ? params[1] :params[0]);
var PATH_TO = path.resolve(params.slice(-1)[0]);
var IS_PATH_TO_SELF = is_in_same_dir(PATH_TARGET, PATH_TO);
var IS_PATH_TO_CHILD = is_in_child(PATH_TARGET, PATH_TO);

//init presets
var preset = params.length==3 ? params[0] : 'notdefined';
var preset_values = ({
	itunes : {
		// itunes supported types : mp3, aiff, wav, mp4, aac, m4a
		ext:['.mp3', '.aiff', '.wav', '.mp4', '.aac', '.m4a'],
		mime:['audio/aac', 'audio/mp4', 'audio/mpeg', 'audio/mp4a-latm', 'audio/x-wav', 'audio/x-aiff'],
		act:function(f){
			add_job_move_f(f, get_dest_f(f, PATH_TO));
		}
	},
	svgmin : {
		ext:['.svg'],
		mime:['image/svg+xml'],
		act:function(f){
			svgmin_f(f, get_dest_f(f,PATH_TO));
		}
	}
})[preset];

//resolve mimetype, extension
var option_exts = args['allow-extensions'];
var option_mimes = args['allow-mime-types'];

var exts_by_option = option_exts && option_exts.split(',');
var exts_by_preset = preset_values && preset_values.ext;
var allowed_exts = exts_by_option && exts_by_preset ? exts_by_option.concat(exts_by_preset) : (exts_by_option || exts_by_preset);

var mimes_by_option = option_mimes && option_mimes.split(',');
var mimes_by_preset = preset_values && preset_values.mime;
var allowed_mimes = mimes_by_option && mimes_by_preset ? mimes_by_option.concat(mimes_by_preset) : (mimes_by_option || mimes_by_preset);

//init lists
var files_roots = {};
var files_working = {};

//queue config
var q = queue({timeout:3000, concurrency:true});
var wait_removal = 10 * 1000;
var wait_file_rewatch = 1000;

//watch
var watcher = cho.watch(PATH_TARGET, {
  persistent: true,
  recursive: true,
  ignored:IS_PATH_TO_SELF ? mkpatt(PATH_TARGET,['tmp','DS_Store']) : PATH_TO+'/'+'**',
  ignoreInitial: true,
  usePolling: false,
  alwaysStat: false,
  depth: 3,
  interval: 0,
  useFsEvents:true,
  atomic: true
});

watcher.on('all', function(e,f) {
	var ext = path.extname(f);
	var valid_ext = allowed_exts ? allowed_exts.indexOf(ext.toLowerCase()) > -1 : true;

	var mt = mime.lookup(f);
	var valid_mime = allowed_mimes ? allowed_mimes.indexOf(mt) > -1 : true;

	var valid_format = valid_ext && valid_mime;

    var temp_origin_f = path.join(path.dirname(f), path.basename(f).replace(path.extname(f), ''));
    var temp_streaming = 'application/octet-stream'==mt && allowed_exts ? allowed_exts.indexOf(path.extname(temp_origin_f))>-1 : path.extname(temp_origin_f);

	var added = valid_format && e=='add';
	var addedDir = e=='addDir';
    var copied = valid_format && e=='change';
    var stream_completed = valid_format && e=='add';

	if(added || copied){
		try{
			if(fs.lstatSync(f).size){
				if(!files_working[f]){
					files_working[f] = get_dest_f(f,PATH_TO);

						do_after_watch(f);

					setTimeout(function(e){
						files_working[f] && (delete files_working[f]);
					}, wait_file_rewatch);
				}
			}
		}catch(err){
			log(err);
		}
	}
});

function do_after_watch(f){
	preset_values && preset_values.act ? preset_values.act(f) : (add_job_move_f(f, get_dest_f(f, PATH_TO)));
}

var escapeShell = function(cmd) {
  return '"'+cmd.replace(/(["\s'$`\\])/g,'\\$1')+'"';
};

/*
	[File Move]
*/

//queue
q.on('success', function(result, job) {

});

function add_job_move_f(target_f, dest_f) {
    var __op = function (cb) {
		try{
			log('copy', target_f, '->', dest_f);
			fs.copySync(target_f, dest_f);
		}catch(e){
			log(e);
		}
        cb();
    };

    if (q.length == 0) {
        q.push(__op);

		if(IS_PATH_TO_SELF){
			q.start();

		}else{
			q.start(function(err) {
				wait_remove_container(target_f);
	        });
		}
    }else{
        q.push(__op);
    }
}

function wait_remove_container(target_f){
    var target_f_root = get_target_root(target_f);
	//parent dir == PATH_TARGET
	if(!target_f_root){
		return;
	}

    var timeoutObj = files_roots[target_f_root];
    timeoutObj && clearTimeout(timeoutObj);
    timeoutObj = setTimeout(function(){
        delete files_roots[target_f_root];
        fs.remove(target_f_root, function(e){
            log('Done.', target_f_root);
        });
    }, wait_removal);
    files_roots[target_f_root] = timeoutObj;
}

/*
	[File Compress]
*/
function svgmin_f(target_f, dest_f){
	var temp_f = dest_f+'.tmp';
	fs.copySync(target_f, temp_f);
	log('minify-svg',target_f,dest_f);
	sh.spawnSync('svgo', [temp_f, dest_f]);
	fs.removeSync(temp_f);
	// sh.spawnSync('gs', '-sDEVICE=pdfwrite -dCompatibilityLevel=1.4 -dPDFSETTINGS=/screen -dNOPAUSE -dQUIET -dBATCH'.split(' ').concat(['-sOutputFile='+dest_f, temp_f]));
}

/*
	[Utils]
*/
function get_dest_f(f, dest_dir){
	return path.join(dest_dir, path.relative(PATH_TARGET, f));
}

function get_target_root(f){
	var f_root_dir = path.dirname(path.resolve(f)).replace(path.resolve(PATH_TARGET),'').split(path.sep)[1];
    return f_root_dir && !is_in_same_dir(f, PATH_TARGET) ? path.join(PATH_TARGET, f_root_dir) : null;
}

function is_in_same_dir(f, d){
	var rel = path.relative(f, d);
	return !rel || rel=='..';
}

function is_in_child(f,d){
	var rel = path.relative(path.resolve(f), path.resolve(d));
	return rel ? (rel.split(path.sep)[0] != "..") : false;
}

function resolve_ws(f){
	return f.replace(/ /g,'\\ ');
}

function get_files_all(dir, exts, mimes){
	var files = [];
	var hasMimeDef = Array.isArray(mimes);
	function rdpath_all(dir_path){
		glob.sync(mkpatt(dir_path, exts)).forEach(function(f){
			var _stat = fs.lstatSync(f);
			if(_stat.isDirectory()){
				// rdpath_all(f);
			}else if(_stat.isFile() && (hasMimeDef ? mimes.indexOf(mime.lookup(f))>-1 : true)){
				files.push(f);
			}
		});
	}
	rdpath_all(dir);
	return files;
}

function mkpatt(dir_path, exts){
	var hasExtDef = Array.isArray(exts);
	return path.resolve(dir_path)+path.sep+'**/*.'+(hasExtDef ? '+('+exts.join('|')+')' : '*');
}

log('Start watching...',PATH_TARGET, '->', PATH_TO);
